#
# repeat test
#
# x86-64 Assembly Code - AT&T format
# program repeattest
# compiled on Mon Apr 04 09:57:14 CEST 2022
.data
.align 8
	tinsel_msg_: .string "TINSEL version 2.0 for x86-84 (Linux) Apr 2022 (c) M.Pappas\n"
	newline_: .string "\n"
	i:	.quad 0
	j:	.quad 0

.text
.align 8
.global _start
# repeat blocks

# main program
_start:
	pushq	%rbx		# save "callee"-save registers
	pushq	%rbp		# new stack frame
	movq	%rsp, %rbp
# print hello message
	lea	tinsel_msg_(%rip), %rdi
	call	write_s_

	movq	$0, %rax
	testq	%rax, %rax
	movq	%rax, i(%rip)
	movq	$10, %rax
	testq	%rax, %rax
	movq	%rax, j(%rip)
main_L0_:
	movq	i(%rip), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	$1, %rax
	testq	%rax, %rax
	popq	%rbx
	addq	%rbx, %rax
	movq	%rax, i(%rip)
	movq	$10, %rax
	testq	%rax, %rax
	movq	%rax, j(%rip)
main_L2_:
	movq	j(%rip), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	$2, %rax
	testq	%rax, %rax
	pushq	%rax
	movq	i(%rip), %rax
	testq	%rax, %rax
	popq	%rbx
	imulq	%rbx, %rax
	popq	%rbx
	addq	%rbx, %rax
	movq	%rax, j(%rip)
	lea	STRCNST_1(%rip), %rax
	movq	%rax, %rdi		# string pointer to be printed in rdi
	call	write_s_
	movq	j(%rip), %rax
	testq	%rax, %rax
	movq	%rax, %rdi		# value to be printed in rdi
	call	write_i_
	lea	newline_(%rip), %rdi
	call	write_s_
	movq	j(%rip), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	$20, %rax
	testq	%rax, %rax
	popq	%rbx
	cmp	%rax, %rbx
	setg	%al
	andq	$1, %rax
	jz	main_L2_
main_L3_:
	lea	STRCNST_2(%rip), %rax
	movq	%rax, %rdi		# string pointer to be printed in rdi
	call	write_s_
	movq	i(%rip), %rax
	testq	%rax, %rax
	movq	%rax, %rdi		# value to be printed in rdi
	call	write_i_
	lea	newline_(%rip), %rdi
	call	write_s_
	movq	i(%rip), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	j(%rip), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	$6, %rax
	testq	%rax, %rax
	movq	%rax, %rbx
	popq	%rax
	cqto		# sign extend to rdx
	idivq	%rbx, %rax
	popq	%rbx
	cmp	%rax, %rbx
	setge	%al
	andq	$1, %rax
	jz	main_L0_
main_L1_:

# end of main
main_exit_:
	movq	%rbp, %rsp		# restore stack frame
	popq	%rbp
	popq	%rbx		# restore "callee"-save registers
	movq	$60, %rax		# exit system call
	xorq	%rdi, %rdi		# exit code 0
	syscall

# end program

.data
	.align 8
# constant string values go here
	STRCNST_1:	.string "j: "
	STRCNST_2:	.string "i: "
