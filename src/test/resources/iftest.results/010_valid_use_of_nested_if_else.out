# x86-64 Assembly Code - AT&T format
# program iftest
# compiled on Mon Apr 04 09:14:38 CEST 2022
.data
.align 8
	tinsel_msg_: .string "TINSEL version 2.0 for x86-84 (Linux) Apr 2022 (c) M.Pappas\n"
	newline_: .string "\n"
	i:	.quad 0
	x:	.quad 1

.text
.align 8
.global _start

# main program
_start:
	pushq	%rbx		# save "callee"-save registers
	pushq	%rbp		# new stack frame
	movq	%rsp, %rbp
# print hello message
	lea	tinsel_msg_(%rip), %rdi
	call	write_s_

	movq	i(%rip), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	$0, %rax
	testq	%rax, %rax
	popq	%rbx
	cmp	%rax, %rbx
	setl	%al
	andq	$1, %rax
	jz	main_L0_
	movq	$1, %rax
	testq	%rax, %rax
	movq	%rax, i(%rip)
	jmp	main_L1_
main_L0_:
	movq	i(%rip), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	$0, %rax
	testq	%rax, %rax
	popq	%rbx
	cmp	%rax, %rbx
	setg	%al
	andq	$1, %rax
	jz	main_L2_
	movq	$-1, %rax
	testq	%rax, %rax
	movq	%rax, i(%rip)
	jmp	main_L3_
main_L2_:
	movq	x(%rip), %rax
	testq	%rax, %rax
	jz	main_L4_
	movq	$10, %rax
	testq	%rax, %rax
	movq	%rax, i(%rip)
main_L4_:
main_L3_:
main_L1_:
	movq	i(%rip), %rax
	testq	%rax, %rax
	movq	%rax, %rdi		# value to be printed in rdi
	call	write_i_
	lea	newline_(%rip), %rdi
	call	write_s_

# end of main
main_exit_:
	movq	%rbp, %rsp		# restore stack frame
	popq	%rbp
	popq	%rbx		# restore "callee"-save registers
	movq	$60, %rax		# exit system call
	xorq	%rdi, %rdi		# exit code 0
	syscall

# end program

.data
	.align 8
