# x86-64 Assembly Code - AT&T format
# program readtest
# compiled on Mon Apr 04 09:40:21 CEST 2022
.data
.align 8
	tinsel_msg_: .string "TINSEL version 2.0 for x86-84 (Linux) Apr 2022 (c) M.Pappas\n"
	newline_: .string "\n"
	i:	.quad 0
	j:	.quad 0
	s:	.space 20

.text
.align 8
.global _start

# function a
a:
	pushq	%rbx		# save "callee"-save registers
	pushq	%rbp		# new stack frame
	movq	%rsp, %rbp
	movq	%rbp, %rsp		# restore stack frame
	popq	%rbp
	popq	%rbx		# restore "callee"-save registers
	ret

# main program
_start:
	pushq	%rbx		# save "callee"-save registers
	pushq	%rbp		# new stack frame
	movq	%rsp, %rbp
# print hello message
	lea	tinsel_msg_(%rip), %rdi
	call	write_s_

# read the two variables
	lea	i(%rip), %rdi		# address of the variable to be read
	call	read_i_
	movq	%rax, i(%rip)
	lea	j(%rip), %rdi		# address of the variable to be read
	call	read_i_
	movq	%rax, j(%rip)
	lea	s(%rip), %rdi		# address of the string to be read
	movq	$20, %rsi		# max number of bytes to read
	call	read_s_
# print the two variables
	movq	i(%rip), %rax
	testq	%rax, %rax
	movq	%rax, %rdi		# value to be printed in rdi
	call	write_i_
	lea	STRCNST_1(%rip), %rax
	movq	%rax, %rdi		# string pointer to be printed in rdi
	call	write_s_
	movq	j(%rip), %rax
	testq	%rax, %rax
	movq	%rax, %rdi		# value to be printed in rdi
	call	write_i_
	lea	newline_(%rip), %rdi
	call	write_s_
	lea	s(%rip), %rax
	movq	%rax, %rdi		# string pointer to be printed in rdi
	call	write_s_
	lea	newline_(%rip), %rdi
	call	write_s_

# end of main
main_exit_:
	movq	%rbp, %rsp		# restore stack frame
	popq	%rbp
	popq	%rbx		# restore "callee"-save registers
	movq	$60, %rax		# exit system call
	xorq	%rdi, %rdi		# exit code 0
	syscall

# end program

.data
	.align 8
# constant string values go here
	STRCNST_1:	.string " "
