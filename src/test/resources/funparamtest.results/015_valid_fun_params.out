# x86-64 Assembly Code - AT&T format
# program testfunparam
# compiled on Mon Apr 18 10:16:32 CEST 2022
.data
.align 8
	tinsel_msg_: .string "TINSEL version 2.1 for x86-84 (Linux) May 2022 (c) M.Pappas\n"
	newline_: .string "\n"
	name:	.string "Marinos"
	greet:	.string "Good Morning"

.text
.align 8
.global _start

# function fun1
fun1:
	pushq	%rbx		# save "callee"-save registers
	pushq	%rbp		# new stack frame
	movq	%rsp, %rbp
	subq	$8, %rsp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	movq	%rsi, -16(%rbp)
	subq	$8, %rsp
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	testq	%rax, %rax
	movq	%rax, %rdi		# string pointer to be printed in rdi
	call	write_s_
	lea	STRCNST_1(%rip), %rax
	movq	%rax, %rdi		# string pointer to be printed in rdi
	call	write_s_
	movq	-8(%rbp), %rax
	testq	%rax, %rax
	pushq	%rax
	movq	-16(%rbp), %rax
	testq	%rax, %rax
	popq	%rbx
	addq	%rbx, %rax
	movq	%rax, %rdi		# value to be printed in rdi
	call	write_i_
	lea	newline_(%rip), %rdi
	call	write_s_
	movq	%rbp, %rsp		# restore stack frame
	popq	%rbp
	popq	%rbx		# restore "callee"-save registers
	ret

# function fun2
fun2:
	pushq	%rbx		# save "callee"-save registers
	pushq	%rbp		# new stack frame
	movq	%rsp, %rbp
	subq	$8, %rsp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	testq	%rax, %rax
	movq	%rax, %rsi		# save string - strcpy_(string_buffer, %rax)
	lea	string_buffer_(%rip), %rdi
	call	strcpy_
	pushq	%rax
	lea	STRCNST_2(%rip), %rax
	popq	%rdi		# add string - strcat_(top-of-stack, %rax)
	movq	%rax, %rsi
	call	strcat_
	movq	%rax, %rsi		# save string - strcpy_(string_buffer, %rax)
	lea	string_buffer_(%rip), %rdi
	call	strcpy_
	pushq	%rax
	movq	-16(%rbp), %rax
	testq	%rax, %rax
	popq	%rdi		# add string - strcat_(top-of-stack, %rax)
	movq	%rax, %rsi
	call	strcat_
	movq	%rbp, %rsp		# restore stack frame
	popq	%rbp
	popq	%rbx		# restore "callee"-save registers
	ret

# main program
_start:
	pushq	%rbx		# save "callee"-save registers
	pushq	%rbp		# new stack frame
	movq	%rsp, %rbp
# print hello message
	lea	tinsel_msg_(%rip), %rdi
	call	write_s_

	lea	greet(%rip), %rax
	pushq	%rbx
	movq	%rax, %rbx
	lea	name(%rip), %rax
	pushq	%r12
	movq	%rax, %r12
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	fun2
	popq	%r12
	popq	%rbx
	movq	%rax, %rdi		# string pointer to be printed in rdi
	call	write_s_
	lea	newline_(%rip), %rdi
	call	write_s_
	movq	$5, %rax
	testq	%rax, %rax
	pushq	%rbx
	movq	%rax, %rbx
	movq	$6, %rax
	testq	%rax, %rax
	pushq	%r12
	movq	%rax, %r12
	lea	STRCNST_3(%rip), %rax
	pushq	%r13
	movq	%rax, %r13
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	call	fun1
	popq	%r13
	popq	%r12
	popq	%rbx

# end of main
main_exit_:
	movq	%rbp, %rsp		# restore stack frame
	popq	%rbp
	popq	%rbx		# restore "callee"-save registers
	movq	$60, %rax		# exit system call
	xorq	%rdi, %rdi		# exit code 0
	syscall

# end program

.data
	.align 8
# buffer for string operations - max str length limit
	string_buffer_:	.space 1024
# constant string values go here
	STRCNST_1:	.string ": "
	STRCNST_2:	.string ", "
	STRCNST_3:	.string "sum"